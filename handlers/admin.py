from aiogram import Router, Bot, F
from aiogram.types import Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import os
import io
from datetime import datetime, timedelta

from utils.isadmin import IsAdmin
from utils.states import AdminSettings

router_admin = Router()

# Apply admin filter to all handlers in this router
router_admin.message.filter(IsAdmin())

# –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
ADMIN_COMMANDS = [
    "/admin - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é",
    "/stats_users - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
    "/stats_buttons - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫",
    "/stats_chart - –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–∂–∞—Ç–∏–π",
    "/stats_daily - –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
    "/stats_active - –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
    "/set_welcome - –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
    "/set_link - –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É",
    "/set_link_text - –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏",
    "/view_welcome - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"
]

async def send_admin_panel(message: Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    response = "üìä –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n" + "\n".join(ADMIN_COMMANDS)
    await message.answer(response)

# –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –≤ register_routers.py
async def admin_panel(message: Message):
    """
    Show admin panel with available commands
    """
    await send_admin_panel(message)

async def get_user_count(message: Message, bot: Bot, db=None):
    """
    Get the total number of users in the database
    :param message: Message instance
    :param bot: Bot instance
    :param db: Database instance
    :return: None
    """
    if db:
        user_count = db.get_user_count()
        await message.reply(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {user_count}")
    else:
        await message.reply("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    await send_admin_panel(message)

async def get_button_stats(message: Message, bot: Bot, db=None):
    """
    Get statistics on button clicks
    :param message: Message instance
    :param bot: Bot instance
    :param db: Database instance
    :return: None
    """
    if not db:
        await message.reply("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        await send_admin_panel(message)
        return
        
    stats = db.get_button_stats()
    if not stats:
        await message.reply("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–∂–∞—Ç–∏—è—Ö –∫–Ω–æ–ø–æ–∫.")
        await send_admin_panel(message)
        return
    
    result = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫:\n\n"
    for button_name, count in stats:
        result += f"{button_name}: {count} —Ä–∞–∑\n"
    
    await message.reply(result)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    await send_admin_panel(message)

async def get_button_stats_chart(message: Message, bot: Bot, db=None):
    """
    Get statistics on button clicks as a text-based chart
    :param message: Message instance
    :param bot: Bot instance
    :param db: Database instance
    :return: None
    """
    if not db:
        await message.reply("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        await send_admin_panel(message)
        return
        
    stats = db.get_button_stats()
    if not stats:
        await message.reply("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–∂–∞—Ç–∏—è—Ö –∫–Ω–æ–ø–æ–∫.")
        await send_admin_panel(message)
        return
    
    # Find the maximum count for scaling
    max_count = max([count for _, count in stats])
    
    # Create a text-based chart
    result = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ (–≥—Ä–∞—Ñ–∏–∫):\n\n"
    
    # Limit to top 10 buttons for readability
    top_stats = stats[:10]
    
    # Calculate the maximum width of button names for alignment
    max_name_width = max([len(button_name) for button_name, _ in top_stats])
    
    for button_name, count in top_stats:
        # Scale the bar to a maximum of 20 characters
        bar_length = int((count / max_count) * 20)
        bar = "‚ñà" * bar_length
        
        # Format with proper alignment
        result += f"{button_name.ljust(max_name_width)} | {bar} {count}\n"
    
    await message.reply(result)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    await send_admin_panel(message)

async def get_daily_stats(message: Message, bot: Bot, db=None):
    """
    Get daily statistics on button clicks for the last 7 days
    :param message: Message instance
    :param bot: Bot instance
    :param db: Database instance
    :return: None
    """
    if not db:
        await message.reply("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        await send_admin_panel(message)
        return
    
    # Get daily stats for the last 7 days
    daily_stats = db.get_daily_stats()
    
    if not daily_stats:
        await message.reply("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
        await send_admin_panel(message)
        return
    
    result = "üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n\n"
    
    for date_str, count in daily_stats:
        # Create a simple bar chart
        bar_length = int(count / 5) + 1  # Scale: 1 block per 5 clicks, minimum 1
        bar = "‚ñà" * min(bar_length, 20)  # Cap at 20 blocks
        
        result += f"{date_str}: {bar} {count}\n"
    
    await message.reply(result)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    await send_admin_panel(message)

async def get_active_users(message: Message, bot: Bot, db=None):
    """
    Get list of most active users
    :param message: Message instance
    :param bot: Bot instance
    :param db: Database instance
    :return: None
    """
    if not db:
        await message.reply("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        await send_admin_panel(message)
        return
    
    active_users = db.get_most_active_users(limit=10)
    
    if not active_users:
        await message.reply("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.")
        await send_admin_panel(message)
        return
    
    result = "üë• –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    
    for i, (user_id, username, first_name, last_name, click_count) in enumerate(active_users, 1):
        user_display = username or f"{first_name} {last_name}".strip() or f"ID: {user_id}"
        result += f"{i}. {user_display}: {click_count} –¥–µ–π—Å—Ç–≤–∏–π\n"
    
    await message.reply(result)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    await send_admin_panel(message)

async def view_welcome(message: Message, bot: Bot, db=None):
    """
    View current welcome message and link
    """
    if not db:
        await message.reply("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        await send_admin_panel(message)
        return
    
    welcome_text = db.get_welcome_message()
    welcome_link = db.get_welcome_link()
    welcome_link_text = db.get_welcome_link_text()
    
    # Create inline keyboard with link button to preview how it looks
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=welcome_link_text, url=welcome_link)]
        ]
    )
    
    info_text = (
        f"üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:\n\n"
        f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n{welcome_text}\n\n"
        f"–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: {welcome_link_text}\n"
        f"–°—Å—ã–ª–∫–∞: {welcome_link}\n\n"
        f"üëá –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:"
    )
    
    await message.reply(info_text)
    await message.answer(welcome_text, reply_markup=keyboard)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    await send_admin_panel(message)

async def set_welcome_cmd(message: Message, state: FSMContext):
    """
    Set new welcome message
    """
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:")
    await state.set_state(AdminSettings.WAITING_FOR_WELCOME_TEXT)

async def set_link_cmd(message: Message, state: FSMContext):
    """
    Set new welcome link
    """
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ https://example.com):")
    await state.set_state(AdminSettings.WAITING_FOR_WELCOME_LINK)

async def set_link_text_cmd(message: Message, state: FSMContext):
    """
    Set new link button text
    """
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏:")
    await state.set_state(AdminSettings.WAITING_FOR_LINK_TEXT)

async def process_welcome_text(message: Message, state: FSMContext, db=None):
    """
    Process new welcome text
    """
    if not db:
        await message.reply("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        await state.clear()
        await send_admin_panel(message)
        return
    
    new_text = message.text
    db.update_setting("welcome_text", new_text)
    
    await message.reply(f"‚úÖ –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:\n{new_text}")
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    await send_admin_panel(message)

async def process_welcome_link(message: Message, state: FSMContext, db=None):
    """
    Process new welcome link
    """
    if not db:
        await message.reply("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        await state.clear()
        await send_admin_panel(message)
        return
    
    new_link = message.text
    
    # Simple validation for URL
    if not (new_link.startswith("http://") or new_link.startswith("https://")):
        await message.reply("‚ùå –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    db.update_setting("welcome_link", new_link)
    
    await message.reply(f"‚úÖ –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n–ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞: {new_link}")
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    await send_admin_panel(message)

async def process_link_text(message: Message, state: FSMContext, db=None):
    """
    Process new link button text
    """
    if not db:
        await message.reply("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        await state.clear()
        await send_admin_panel(message)
        return
    
    new_text = message.text
    db.update_setting("welcome_link_text", new_text)
    
    await message.reply(f"‚úÖ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç: {new_text}")
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    await send_admin_panel(message)
